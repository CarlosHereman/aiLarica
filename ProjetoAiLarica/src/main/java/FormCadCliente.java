
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class FormCadCliente extends javax.swing.JFrame {

    private Cliente cliente;
    
    private static FormCadCliente instanciaUnica;
    
    private FormCadCliente() {
        initComponents();
    }
    
    // MÉTODO SINGLETON
    public static FormCadCliente getCadClient() {
        if (instanciaUnica == null || !instanciaUnica.isVisible()) {
            instanciaUnica = new FormCadCliente();
        }
        return instanciaUnica;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        cxNome = new javax.swing.JTextField();
        btLimpar = new javax.swing.JButton();
        btSair = new javax.swing.JButton();
        btCadClient = new javax.swing.JButton();
        btAltClientCpf = new javax.swing.JButton();
        rtCpf = new javax.swing.JLabel();
        btExcluirClientCpf = new javax.swing.JButton();
        cxCpf = new javax.swing.JTextField();
        rtNome = new javax.swing.JLabel();
        rtTel = new javax.swing.JLabel();
        cxTel = new javax.swing.JTextField();
        rtEnd = new javax.swing.JLabel();
        cxEnd = new javax.swing.JTextField();
        rtEmail = new javax.swing.JLabel();
        cxEmail = new javax.swing.JTextField();
        rtSenha = new javax.swing.JLabel();
        cxSenha = new javax.swing.JTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Cliente");

        btLimpar.setText("Limpar");
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });

        btSair.setText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        btCadClient.setText("Cadastrar");
        btCadClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCadClientActionPerformed(evt);
            }
        });

        btAltClientCpf.setText("Alterar pelo CPF");
        btAltClientCpf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAltClientCpfActionPerformed(evt);
            }
        });

        rtCpf.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rtCpf.setText("CPF:");

        btExcluirClientCpf.setText("Excluir por CPF");
        btExcluirClientCpf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirClientCpfActionPerformed(evt);
            }
        });

        rtNome.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rtNome.setText("Nome: ");

        rtTel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rtTel.setText("Telefone:");

        cxTel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cxTelActionPerformed(evt);
            }
        });

        rtEnd.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rtEnd.setText("Endereço:");

        rtEmail.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rtEmail.setText("E-mail:");

        rtSenha.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rtSenha.setText("Senha:");

        cxSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cxSenhaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rtEmail)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btLimpar, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btSair)
                        .addGap(310, 310, 310))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rtEnd)
                                    .addComponent(rtTel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rtCpf)
                                    .addComponent(rtNome))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cxEmail)
                                    .addComponent(cxCpf)
                                    .addComponent(cxTel)
                                    .addComponent(cxEnd)
                                    .addComponent(cxNome)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addComponent(cxSenha)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rtSenha)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(btCadClient)
                .addGap(27, 27, 27)
                .addComponent(btAltClientCpf)
                .addGap(30, 30, 30)
                .addComponent(btExcluirClientCpf)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtNome)
                    .addComponent(cxNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtCpf)
                    .addComponent(cxCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtTel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cxTel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtEnd)
                    .addComponent(cxEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtEmail)
                    .addComponent(cxEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtSenha)
                    .addComponent(cxSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCadClient)
                    .addComponent(btAltClientCpf)
                    .addComponent(btExcluirClientCpf))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btSair)
                    .addComponent(btLimpar))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
        limpar();
    }//GEN-LAST:event_btLimparActionPerformed

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        sair();
    }//GEN-LAST:event_btSairActionPerformed

    private void btCadClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCadClientActionPerformed
        cadastrar();
        //listarTab();
    }//GEN-LAST:event_btCadClientActionPerformed

    private void btAltClientCpfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAltClientCpfActionPerformed
        try {
            alterar();
            //listarTab();
        } catch (LetterException | NumberException | EmailException ex) {
            Logger.getLogger(FormCadCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btAltClientCpfActionPerformed

    private void btExcluirClientCpfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirClientCpfActionPerformed
        excluir();
        //listarTab();
    }//GEN-LAST:event_btExcluirClientCpfActionPerformed

    private void cxTelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cxTelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cxTelActionPerformed

    private void cxSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cxSenhaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cxSenhaActionPerformed

       public void excluir(){
        cliente = new Cliente();
        ClienteDAO clienteDAO = new ClienteDAO();
      
         try{
            cliente.setCpf(cxCpf.getText());
            
            cliente = clienteDAO.consultarClientePorCpf(cliente.getCpf());
         
            if(cliente != null){
                
                cxCpf.setText(String.valueOf(cliente.getCpf()));
                cxNome.setText(cliente.getNome());
                
                int x = JOptionPane.showConfirmDialog(null, "Deseja realmente excluir o cadastro?", "Exclusão de Cliente", JOptionPane.YES_NO_CANCEL_OPTION);
                if(x == 0){
                    Boolean sucesso = clienteDAO.removerCliente(cliente.getCpf());
                    
                    if (sucesso){
                        JOptionPane.showMessageDialog(null, "Cadastro removido com sucesso!", "Remoção de Cliente", 1);
                        limpar();
                    } else {
                         JOptionPane.showMessageDialog(null, "Não foi possível excluir o cadastro", "Erro", 0);
                    }
                }
            }
            else{
              JOptionPane.showMessageDialog(null, "Não existe cliente com este CPF!", "Cliente inexistente", 0);
              cxCpf.setText("");
             cxCpf.requestFocus();
            }
        } //fim try
        catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(null, "O CPF deve ser um inteiro!", "ERRO de CPF", 0);
            cxCpf.setText("");
            cxCpf.requestFocus();
        } //fim catch

    
    }
    
    public void alterar() throws LetterException, NumberException, EmailException{
        cliente = new Cliente();
        ClienteDAO clienteDAO = new ClienteDAO();
      
         try{
            cliente.setCpf(cxCpf.getText());
            cliente.setNome(cxNome.getText());
            cliente.setTel(cxTel.getText());
            cliente.setEnd(cxEnd.getText());
            cliente.setEmail(cxEmail.getText());
            cliente.setSenha(cxSenha.getText());
                
            boolean sucesso = clienteDAO.atualizarCliente(cliente);
         
            if(sucesso){
                JOptionPane.showMessageDialog(null, "Cliente atualizado!", "Cliente Atualizado", 1);
                limpar();
             }
            else{
              JOptionPane.showMessageDialog(null, "Não existe cliente com este CPF!", "Cliente inexistente", 0);
              cxCpf.setText("");
              cxCpf.requestFocus();
            }
        } 
        catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(null, "O CPF deve ser um inteiro!", "ERRO de CPF", 0);
            cxCpf.setText("");
            cxCpf.requestFocus();
        } //fim catch
    }

    public void consultar(){
        cliente = new Cliente();
        ClienteDAO clienteDAO = new ClienteDAO();
        
         try{
            cliente.setCpf(cxCpf.getText());
            cliente = clienteDAO.consultarClientePorCpf(cliente.getCpf());
         
         if(cliente != null){
            cxCpf.setText(cliente.getCpf());
            cxNome.setText(cliente.getNome());
            cxTel.setText(Long.toString(cliente.getTel()));
            cxEnd.setText(cliente.getEnd());
            cxEmail.setText(cliente.getEmail());
            JOptionPane.showMessageDialog(null, "Confira os Dados do Cliente!", "Cliente encontrado", 1);
            limpar();
         }
         else{
            JOptionPane.showMessageDialog(null, "Não existe cliente com este CPF!", "Cliente inexistente", 0);
            cxCpf.setText("");
            cxCpf.requestFocus();
         }
        } //fim try
        catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(null, "O CPF deve ser um inteiro!", "ERRO de CPF", 0);
            cxCpf.setText("");
            cxCpf.requestFocus();
        } //fim catch
    }
    
    public void cadastrar(){
        cliente = new Cliente();
        try{
            cliente.setCpf(cxCpf.getText());
            cliente.setNome(cxNome.getText());
            cliente.setTel(cxTel.getText());
            cliente.setEnd(cxEnd.getText());
            cliente.setEmail(cxEmail.getText());
            cliente.setSenha(cxSenha.getText());
            
            ClienteDAO clienteDAO = new ClienteDAO();
            
            if (clienteDAO.consultarClientePorCpf(cliente.getCpf()) == null){
                boolean sucesso = clienteDAO.cadastrarCliente(cliente);
                if (sucesso) {
                    cliente.impDados();
                    limpar();
                } else {
                    JOptionPane.showMessageDialog(null, "Erro ao cadastrar cliente!", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } else {
               JOptionPane.showMessageDialog(null, "Já existe um cliente com este CPF!", "ERRO de CPF", 0);
               cxCpf.setText("");
               cxCpf.requestFocus();
            }
        } catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(null, "O CPF deve ser um inteiro!", "ERRO de CPF", 0);
            cxCpf.setText("");
            cxCpf.requestFocus();
        }
        catch (LetterException le) {
            JOptionPane.showMessageDialog(null, "O Nome deve ser apenas letras!", "ERRO de Nome", 0);
            cxNome.setText("");
            cxNome.requestFocus();
        }
        catch (NumberException ne) {
            JOptionPane.showMessageDialog(null, "O Telefone deve ser um inteiro!", "ERRO de Telefone", 0);
            cxTel.setText("");
            cxTel.requestFocus();
        }
        catch (EmailException ee) {
            JOptionPane.showMessageDialog(null, "O E-mail deve ser valido!", "ERRO de E-mail", 0);
            cxEmail.setText("");
            cxEmail.requestFocus();
        }
    }
    
    public void sair(){
        int resp = JOptionPane.showConfirmDialog(null, "Deseja realmente sair?","Confirmar Saída", JOptionPane.YES_NO_CANCEL_OPTION);
        if(resp == 0){
            this.dispose();
        }
    }
    
    public void limpar(){
        cxCpf.setText("");
        cxNome.setText("");
        cxTel.setText("");
        cxEnd.setText("");
        cxEmail.setText("");
        cxSenha.setText("");
        cxCpf.requestFocus();
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAltClientCpf;
    private javax.swing.JButton btCadClient;
    private javax.swing.JButton btExcluirClientCpf;
    private javax.swing.JButton btLimpar;
    private javax.swing.JButton btSair;
    private javax.swing.JTextField cxCpf;
    private javax.swing.JTextField cxEmail;
    private javax.swing.JTextField cxEnd;
    private javax.swing.JTextField cxNome;
    private javax.swing.JTextField cxSenha;
    private javax.swing.JTextField cxTel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel rtCpf;
    private javax.swing.JLabel rtEmail;
    private javax.swing.JLabel rtEnd;
    private javax.swing.JLabel rtNome;
    private javax.swing.JLabel rtSenha;
    private javax.swing.JLabel rtTel;
    // End of variables declaration//GEN-END:variables
}
